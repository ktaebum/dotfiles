set encoding=utf-8
set nocompatible
set splitbelow

let g:python3_host_prog = '$HOME/Program/miniconda3/bin/python'

filetype off
call plug#begin('$HOME/.vim/plugged')

""" color schemes
Plug 'sonph/onehalf', {'rtp': 'vim/'}
Plug 'jnurmine/Zenburn'
Plug 'phanviet/vim-monokai-pro'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'thinkpixellab/flatland'
Plug 'dracula/vim', { 'name': 'dracula' }
Plug 'sainnhe/gruvbox-material'
Plug 'sainnhe/sonokai'
Plug 'mhartington/oceanic-next'
Plug 'tomasr/molokai'
Plug 'danilo-augusto/vim-afterglow'
Plug 'nanotech/jellybeans.vim'
Plug 'junegunn/seoul256.vim'
Plug 'ajmwagar/vim-deus'
Plug 'sainnhe/edge'
Plug 'ayu-theme/ayu-vim'
Plug 'sainnhe/everforest'
Plug 'arcticicestudio/nord-vim'
Plug 'NLKNguyen/papercolor-theme'

"""""" syntax highlight
Plug 'vim-python/python-syntax'
Plug 'sheerun/vim-polyglot'                     " advanced syntax highlight
"Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update


"""""" powerline plugins
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'maximbaz/lightline-ale'
Plug 'ryanoasis/vim-devicons'

"""""" snippets plugins
"Plug 'SirVer/ultisnips'                         " snippets
Plug 'honza/vim-snippets'                       " snippets
Plug 'L3MON4D3/LuaSnip'

" """""" searcher and file/tag navigators
Plug 'scrooloose/nerdtree'                      " file navigator
Plug 'majutsushi/tagbar'                        " displays tags in a window
"
" """""" git plugins
Plug 'tpope/vim-fugitive'                       " git integration
Plug 'airblade/vim-gitgutter'                   " git diff line by line
Plug 'gisphm/vim-gitignore'                     " git ignore
"
" """""" commenters
Plug 'scrooloose/nerdcommenter'                 " easy-commenting

" """""" syntax checker
Plug 'dense-analysis/ale'

" """"" with tmux
Plug 'christoomey/vim-tmux-navigator'

" """"" indent line
Plug 'Yggdroot/indentLine'

" """"" LSP
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'

" """"" Tmuxline
Plug 'edkolev/tmuxline.vim'

call plug#end()
filetype plugin indent on

"""" basic editor setting """"

"let g:dracula_colorterm = 0

set mouse=a
set ruler
set hlsearch
set incsearch
set showmatch
set backspace=indent,eol,start
set nu
set relativenumber
set noshowmode
set autowrite
set colorcolumn=120
highlight Comment cterm=italic
set tabstop=2
set softtabstop=2
set shiftwidth=2
set autoindent
set smartindent
set smarttab
set expandtab
set laststatus=2
set showtabline=2
set fillchars+=vert:\|

"""" ctags """"
"au BufWritePost *.py,*.c,*.cpp,*.h silent! !eval 'ctags -R -o newtags; mv newtags tags' &

"""" paper color scheme """"
set t_Co=256

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

let g:python_highlight_all = 1
let g:PaperColor_Theme_Options = {
  \ 'language': {
  \   'python': {
  \     'highlight_builtins' : 1
  \   },
  \   'cpp': {
  \     'highlight_standard_library': 1
  \   },
  \   'c': {
  \     'highlight_standard_library': 1
  \   }
  \ },
  \ 'theme': {
  \   'default.light': {
  \     'override' : {
  \       'color00' : ['#f7f7f7', ''],
  \       'linenumber_bg' : ['#f4f4f4', ''],
  \       'linenumber_fg' : ['#afafaf', ''],
  \       'error_bg' : ['#f7f7f7', ''],
  \       'error_fg' : ['#d70000', ''],
  \       'todo_bg' : ['#f7f7f7', ''],
  \       'todo_fg' : ['#d75f00', ''],
  \       'vertsplit_bg' : ['#f7f7f7', ''],
  \     }
  \   }
  \ }
  \ }

" The configuration options should be placed before `colorscheme sonokai`.
let g:sonokai_style = 'maia'
let g:sonokai_enable_italic = 0
let g:sonokai_disable_italic_comment = 1

let g:oceanic_next_terminal_bold = 0
let g:oceanic_next_terminal_italic = 0

let g:molokai_original = 0
let g:rehash256 = 1

let g:dracula_italic = 0

let g:onedark_terminal_italics = 0
let g:onedark_termcolors = 16

let g:gruvbox_material_enable_italic = 0
let g:gruvbox_material_disable_italic_comment = 1
let g:gruvbox_contrast_dark = 'soft'
let g:gruvbox_contrast_light = 'hard'

let ayucolor = 'mirage'

let g:everforest_background = 'hard'

"color onedark
"color jellybeans
"color OceanicNext
"color afterglow
"color PaperColor
let g:seoul256_background = 235
"color seoul256
"color one
"color gruvbox
"color flattened_light
"color onehalflight
"color PaperColor
"color onehalfdark
"color monokai
"color nord
"color monokai_pro
"color gruvbox
color molokai
"color dracula
"color dracula_pro
"color gruvbox-material
"color sonokai
"color gruvbox-material
"color molokai
"color edge
"color PaperColor
"color ayu
"color everforest
set background=dark
syntax on

"""" python language set """"
au FileType python setl sw=4 sts=4 et

"""" different cursor for different mode """"
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

"""" ale """"
let g:ale_linters = {
\   'python': ['pylint'],
\   'c': ['clang', 'clang-format', 'clangtidy'],
\   'cpp': ['clang', 'clang-format', 'clangtidy'],
\   'cuda': ['nvcc'],
\   'rust': ['cargo', 'rustfmt']
\}
highlight ALEErrorSign guifg=#F92672 guibg=#232526
highlight ALEWarningSign guifg=#ED6237 guibg=#232526
let g:ale_sign_error = "E"
let g:ale_sign_warning = "W"
let g:ale_set_highlights = 0
"monokai pro
"highlight ALEErrorSign ctermfg=9 ctermbg=15 guifg=#C30500 guibg=#423f42
"highlight ALEWarningSign ctermfg=11 ctermbg=15 guifg=#ED6237 guibg=#423f42
"highlight ALEErrorSign ctermfg=9 ctermbg=15 guifg=#C30500 guibg=#3a3a3a
"highlight ALEWarningSign ctermfg=11 ctermbg=15 guifg=#ED6237 guibg=#3a3a3a
"seoul 256
"highlight ALEErrorSign ctermfg=9 ctermbg=15 guifg=#C30500 guibg=#3F3F3F
"highlight ALEWarningSign ctermfg=11 ctermbg=15 guifg=#ED6237 guibg=#3F3F3F
"nord
"highlight ALEErrorSign ctermfg=9 ctermbg=15 guifg=#C30500 guibg=#2e3440
"highlight ALEWarningSign ctermfg=11 ctermbg=15 guifg=#ED6237 guibg=#2e3440
"dracula
"highlight ALEErrorSign ctermfg=9 ctermbg=15 guifg=#C30500 guibg=#44475a
"highlight ALEWarningSign ctermfg=11 ctermbg=15 guifg=#ED6237 guibg=#44475a

let g:ale_sign_column_always = 1
let g:ale_cpp_clang_options =
      \ "-std=c++11 -isystem -I/usr/include/c++/7 -I/usr/include -I/usr/local/cuda-10.2/include -I$HOME/Workspace/tensorflow_internal -I$HOME/Program/miniconda3/envs/terra/include/python3.8 -I/usr/local/openmpi-4.0.1/include"
let g:ale_c_clang_options =
      \ "-std=c++11 -isystem -I/usr/include/c++/7 -I/usr/include -I/usr/local/cuda-10.2/include -I$HOME/Workspace/tensorflow_internal -I$HOME/Program/miniconda3/envs/terra/include/python3.8 -I/usr/local/openmpi-4.0.1/include"

" highlight clear ALEErrorSign
" highlight clear ALEWarningSign

"""" google codefmt """"
""" Google CodeFMT
augroup autoformat_settings
    "autocmd FileType c,cpp,java,javascript,typescript AutoFormatBuffer clang-format
    "autocmd FileType cpp AutoFormatBuffer clang-format
    "autocmd FileType python AutoFormatBuffer yapf
    "autocmd FileType bzl AutoFormatBuffer buildifier
augroup END

""" key mapping
nmap <Tab> :bn<CR>
nmap <C-y> :vertical resize +10<CR>
nmap <C-t> :vertical resize -10<CR>
nmap <C-W>y :resize +10<CR>
nmap <C-W>t :resize -10<CR>
nmap <leader>t :NERDTreeToggle<CR>
nmap <leader>y :TagbarToggle<CR>
nmap <C-m> <C-W>\| <C-W>_
nmap <C-n> <C-W>1\|
nmap <C-e> <C-W>=
nmap <C-v> :vs<CR>
nmap <C-W>v :sp<CR>
nmap <C-p> :bp<CR>
nmap <leader><space> :noh<CR>
nnoremap <silent> <C-h> <C-W>h
nnoremap <silent> <C-l> <C-W>l
nnoremap <silent> <C-k> <C-W>k
nnoremap <silent> <C-j> <C-W>j
nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)
nmap <Leader>8 <Plug>lightline#bufferline#go(8)
nmap <Leader>9 <Plug>lightline#bufferline#go(9)
nmap <Leader>0 <Plug>lightline#bufferline#go(10)
nmap ; :
imap <silent> <c-space> <Plug>(completion_trigger)

"""" lightline config """""
let g:lightline = {
      \ 'colorscheme': 'molokai',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'filename', 'modified' ] ],
      \   'right': [[ 'linter_checking', 'linter_errors','linter_warnings', 'linter_infos', 'linter_ok' ]]
      \ },
      \ 'tabline': {
      \   'left': [ ['buffers'] ],
      \   'right': [ ['close'] ]
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers',
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_infos': 'lightline#ale#infos',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'component_type': {
      \   'buffers': 'tabsel',
      \   'linter_checking': 'right',
      \   'linter_infos': 'right',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error',
      \   'linter_ok': 'right',
      \ }
      \ }
autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()
let g:lightline#bufferline#min_buffer_count = 2
let g:lightline#bufferline#show_number  = 2
let g:lightline#bufferline#shorten_path = 1
let g:lightline#bufferline#unnamed      = '[No Name]'
let g:lightline#bufferline#enable_devicons = 1
let g:lightline#bufferline#number_map = {
      \ 0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴',
      \ 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'}
let g:lightline#bufferline#composed_number_map = {
      \ 1:  '⑴ ', 2:  '⑵ ', 3:  '⑶ ', 4:  '⑷ ', 5:  '⑸ ',
      \ 6:  '⑹ ', 7:  '⑺ ', 8:  '⑻ ', 9:  '⑼ ', 10: '⑽ ',
      \ 11: '⑾ ', 12: '⑿ ', 13: '⒀ ', 14: '⒁ ', 15: '⒂ ',
      \ 16: '⒃ ', 17: '⒄ ', 18: '⒅ ', 19: '⒆ ', 20: '⒇ '}

""" enable project-specific vimrc
"set exrc
"set secure

""""" Neovim LSP related
set completeopt=menuone,noinsert,noselect
set shortmess+=c
let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
let g:completion_enable_snippet = 'UltiSnips'

augroup CompletionTriggerCharacter
    autocmd!
    autocmd BufEnter * let g:completion_trigger_character = ['.']
    autocmd BufEnter *.c,*.cpp let g:completion_trigger_character = ['.', '::', '->']
augroup end

command! Format execute 'lua vim.lsp.buf.formatting()'

:lua << EOF
  local nvim_lsp = require('lspconfig')

  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)

  local servers = {'clangd', 'vimls', 'pyright', 'tsserver'}
  for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup{
      capabilities=capabilities
    }
  end
  vim.lsp.handlers['textDocument/publishDiagnostics'] = function() end
  local cmp = require 'cmp'
  cmp.setup {
    snippet = {
      expand = function(args)
        require('luasnip').lsp_expand(args.body)
      end,
    },
    mapping = {
      ['<C-p>'] = cmp.mapping.select_prev_item(),
      ['<C-n>'] = cmp.mapping.select_next_item(),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-e>'] = cmp.mapping.close(),
      ['<C-Space>'] = cmp.mapping.complete(),
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'luasnip' },
    },
  }
EOF

"['<CR>'] = cmp.mapping.confirm {
"behavior = cmp.ConfirmBehavior.Replace,
"select = true,
"},
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
"nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
"nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
"nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
"nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
"nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
"nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
