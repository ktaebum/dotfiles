set encoding=utf-8
set nocompatible
set splitbelow
set tags=./tags;/

let g:python3_host_prog = '$HOME/Program/miniconda3/bin/python3'

call plug#begin('$HOME/.vim/plugged')

""" color schemes
Plug 'dracula/vim', { 'name': 'dracula' }
Plug 'tomasr/molokai'
Plug 'nanotech/jellybeans.vim'
Plug 'junegunn/seoul256.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'morhetz/gruvbox'
Plug 'projekt0n/github-nvim-theme'
Plug 'tiagovla/tokyodark.nvim'
Plug 'tomasiser/vim-code-dark'
Plug 'rebelot/kanagawa.nvim'
Plug 'EdenEast/nightfox.nvim'
Plug 'sainnhe/everforest'

"""""" syntax highlight
Plug 'vim-python/python-syntax'
Plug 'sheerun/vim-polyglot'
Plug 'nvim-treesitter/nvim-treesitter'

"""""" powerline plugins
Plug 'nvim-lualine/lualine.nvim'

" """""" searcher and file/tag navigators
Plug 'nvim-tree/nvim-web-devicons' " optional, for file icons
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'sindrets/diffview.nvim'

" """""" git plugins
Plug 'tpope/vim-fugitive'                       " git integration
Plug 'airblade/vim-gitgutter'                   " git diff line by line
Plug 'gisphm/vim-gitignore'                     " git ignore

" """""" commenters
Plug 'scrooloose/nerdcommenter'                 " easy-commenting
Plug 'folke/todo-comments.nvim'

" """""" syntax checker
Plug 'dense-analysis/ale'

" """"" with tmux
Plug 'christoomey/vim-tmux-navigator'

" """"" indent line
Plug 'Yggdroot/indentLine'

" """"" LSP
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'SirVer/ultisnips'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'

" """"" markdown
Plug 'plasticboy/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }

" """"" Tmuxline
Plug 'edkolev/tmuxline.vim'
Plug 'akinsho/toggleterm.nvim', {'tag' : '*'}

Plug 'tarekbecker/vim-yaml-formatter'

" """"" Typescript
" Plug 'leafgarland/typescript-vim'

" """"" Html
Plug 'alvan/vim-closetag'


call plug#end()
filetype plugin indent on

set mouse=a
set ruler
set hlsearch
set incsearch
set showmatch
set backspace=indent,eol,start
set nu
set relativenumber
set noshowmode
set autowrite
set colorcolumn=120
highlight Comment cterm=italic
set tabstop=2
set softtabstop=2
set shiftwidth=2
set autoindent
set smartindent
set smarttab
set expandtab
set laststatus=3
set showtabline=2
set fillchars+=vert:\|

" project specific vimrc
set exrc
set secure

""""" Neovim LSP related
set completeopt=menuone,noinsert,noselect
set shortmess+=c
let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']

augroup CompletionTriggerCharacter
    autocmd!
    autocmd BufEnter * let g:completion_trigger_character = ['.']
    autocmd BufEnter *.c,*.cpp,*.cc let g:completion_trigger_character = ['.', '::', '->']
augroup end

command! Format execute 'lua vim.lsp.buf.formatting()'

""""" lua setup
:lua << EOF
  local nvim_lsp = require('lspconfig')

  -- Set local servers.
  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  local servers = {'clangd', 'vimls', 'pyright', 'tsserver', 'gopls', 'angularls', 'html', 'tailwindcss', 'cssmodules_ls', 'cssls', 'cmake'}
  for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup{
      capabilities=capabilities,
      handlers = {["textDocument/publishDiagnostics"] = function(...) end}
    }
  end

  vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
      virtual_text = false
    }
  )

  local cmp = require 'cmp'
  -- key bindings
  cmp.setup({
    snippet = {
      expand = function(args)
        vim.fn["UltiSnips#Anon"](args.body)
      end,
    },
    mapping = {
      ['<C-p>'] = cmp.mapping.select_prev_item(),
      ['<C-n>'] = cmp.mapping.select_next_item(),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-e>'] = cmp.mapping({
            i = cmp.mapping.abort(),
            c = cmp.mapping.close(),
      }),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
      ['<C-l>'] = cmp.mapping.confirm({ select = true }),
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'ultisnips' },
    }, {
      { name = 'buffer' },
    }
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({'/', '?'}, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- disable netrw at the very start of your init.lua (strongly advised)
  vim.g.loaded_netrw = 1
  vim.g.loaded_netrwPlugin = 1

  -- set termguicolors to enable highlight groups
  vim.opt.termguicolors = true

  -- empty setup using defaults
  require("nvim-tree").setup()

  -- OR setup with some options
  require("nvim-tree").setup({
    sort_by = "case_sensitive",
    view = {
      width = 30,
      mappings = {
        list = {
          { key = "u", action = "dir_up" },
        },
      },
    },
    renderer = {
      group_empty = true,
    },
    filters = {
      dotfiles = true,
    },
  })

  require('lualine').setup {
    options = {
      icons_enabled = true,
      theme = 'auto',
      component_separators = { left = '', right = ''},
      section_separators = { left = '', right = ''},
      disabled_filetypes = {
        statusline = {},
        winbar = {},
      },
      ignore_focus = {},
      always_divide_middle = true,
      globalstatus = false,
      refresh = {
        statusline = 1000,
        tabline = 1000,
        winbar = 1000,
      }
    },
    sections = {
      lualine_a = {'mode'},
      lualine_b = {'branch', 'diff', 'diagnostics'},
      lualine_c = {'filename'},
      lualine_x = {'encoding', 'fileformat', 'filetype'},
      lualine_y = {'progress'},
      lualine_z = {'location'}
    },
    inactive_sections = {
      lualine_a = {},
      lualine_b = {},
      lualine_c = {'filename'},
      lualine_x = {'location'},
      lualine_y = {},
      lualine_z = {}
    },
    tabline = {
      lualine_a = {'buffers'},
      lualine_c = {'filename'},
      lualine_z = {'tabs'},
    },
    winbar = {},
    inactive_winbar = {},
    extensions = {}
  }

  require("todo-comments").setup {}

  require("toggleterm").setup {}
EOF

"""" vim tex """"
let g:tex_conceal = ''

let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_math = 1
let g:vim_markdown_conceal_code_blocks = 0

"""" paper color scheme """"
set t_Co=256

if exists('+termguicolors')
  "let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  "let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

let g:python_highlight_all = 1
let g:PaperColor_Theme_Options = {
  \ 'language': {
  \   'python': {
  \     'highlight_builtins' : 1
  \   },
  \   'cpp': {
  \     'highlight_standard_library': 1
  \   },
  \   'c': {
  \     'highlight_standard_library': 1
  \   }
  \ },
  \ 'theme': {
  \   'default.light': {
  \     'override' : {
  \       'color00' : ['#f7f7f7', ''],
  \       'linenumber_bg' : ['#f4f4f4', ''],
  \       'linenumber_fg' : ['#afafaf', ''],
  \       'error_bg' : ['#f7f7f7', ''],
  \       'error_fg' : ['#d70000', ''],
  \       'todo_bg' : ['#f7f7f7', ''],
  \       'todo_fg' : ['#d75f00', ''],
  \       'vertsplit_bg' : ['#f7f7f7', ''],
  \     }
  \   },
  \   'default.dark': {
  \     'override' : {
  \       'error_bg' : ['#1c1c1c', ''],
  \       'error_fg' : ['#d70000', ''],
  \       'todo_bg' : ['#f7f7f7', ''],
  \       'todo_fg' : ['#d75f00', ''],
  \     }
  \   }
  \ }
  \ }

let g:edge_enable_italic = 0
let g:sonokai_style = 'maia'
let ayucolor="dark"
let g:seoul256_background = 233
let g:gruvbox_contrast_dark = "hard"
let g:everforest_background = "hard"

color kanagawa
set background=dark
syntax on

"""" python language set """"
au FileType python setl sw=4 sts=4 et

"""" HTML language set """"
au BufNewFile,BufRead *.html set filetype=html

""" key mapping
let mapleader=" "
nmap <Tab> :bn<CR>
nmap <C-[>Up :vertical resize +10<CR>
nmap <C-]> :vertical resize -10<CR>
nmap <C-W>[ :resize +10<CR>
nmap <C-W>] :resize -10<CR>
nmap <leader>t :NvimTreeToggle<CR>
nmap <leader>ff <cmd>Telescope find_files<cr>
nmap <leader>fg <cmd>Telescope live_grep<cr>
nmap <leader>fb <cmd>Telescope buffers<cr>
nmap <leader>fh <cmd>Telescope help_tags<cr>
nmap <leader>m <C-W><Bar><C-W>_
nmap <leader>n <C-W>1<Bar>
nmap <C-e> <C-W>=
nmap <C-v> :vs<CR>
nmap <C-W>v :sp<CR>
nmap <C-p> :bp<CR>
nmap <C-o> :ToggleTerm<CR>
nmap <leader>r :NvimTreeFindFile<CR>
nnoremap <silent> <C-h> <C-W>h
nnoremap <silent> <C-l> <C-W>l
nnoremap <silent> <C-k> <C-W>k
nnoremap <silent> <C-j> <C-W>j
nmap <Leader>1 :LualineBuffersJump 1<CR>
nmap <Leader>2 :LualineBuffersJump 2<CR>
nmap <Leader>3 :LualineBuffersJump 3<CR>
nmap <Leader>4 :LualineBuffersJump 4<CR>
nmap <Leader>5 :LualineBuffersJump 5<CR>
nmap <Leader>6 :LualineBuffersJump 6<CR>
nmap <Leader>7 :LualineBuffersJump 7<CR>
nmap <Leader>8 :LualineBuffersJump 8<CR>
nmap <Leader>9 :LualineBuffersJump 9<CR>
nmap <Leader>` :LualineBuffersJump $<CR>
nmap ; :

"""" ale """"
let g:ale_linters = {
\   'python': ['pylint', 'pyright'],
\   'c': ['clang', 'clang-format', 'clangtidy'],
\   'cc': ['clang', 'clang-format', 'clangtidy'],
\   'cpp': ['clang', 'clang-format', 'clangtidy'],
\   'cuda': ['nvcc'],
\   'rust': ['cargo', 'rustfmt'],
\   'html': ['angular'],
\   'typescript': ['eslint'],
\}
"molokai
"highlight ALEErrorSign guifg=#F92672 guibg=#232526
"highlight ALEWarningSign guifg=#ED6237 guibg=#232526
"carbonfox
"highlight ALEErrorSign guifg=#F16DA6 guibg=#0c0c0c
"highlight ALEWarningSign guifg=#2dc7c4 guibg=#0c0c0c
"kanagawa
highlight ALEErrorSign guifg=#E82424 guibg=#1F1F28
highlight ALEWarningSign guifg=#FF9E3B guibg=#1F1F28
"papercolor
"highlight ALEErrorSign guifg=#D70000 guibg=#1C1C1C
"highlight ALEWarningSign guifg=#FFAF00 guibg=#1C1C1C
let g:ale_sign_error = " "
let g:ale_sign_warning = " "
let g:ale_set_highlights = 0
let g:ale_linters_explicit = 1
nnoremap <silent> gD <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
"nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-s> <cmd>lua vim.lsp.buf.signature_help()<CR>
"nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
"nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
"nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
"nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>

let g:closetag_shortcut = '>'
let g:closetag_close_shortcut = '<leader>>'

highlight WinSeparator guibg=None

" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0
" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1
" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 1
" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0
" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0
" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''
" specify browser to open preview page
" default: ''
let g:mkdp_browser = ''
" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0
" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''
